---
# Host variables for docker-cloud-01 host.

fileserver_setup: true
fileserver_setup_swap_file: true

fileserver_swap_file:
  path: /swapfile
  size: 2G

# ntfy variables
ntfy_setup: true
ntfy_user: "{{ default_user }}"
ntfy_password: "{{ secret_ntfy_password }}"
ntfy_base_url: "https://ntfy.stechsolutions.ca"

# Healthchecks variables
hc_db_name: hc
hc_db_user: healthchecks_user
hc_db_password: "{{ secret_hc_db_password }}"
# docker container configuration files
docker_configuration_files:
  - name: traefik.yaml
    src: "{{ inventory_dir }}/../files/traefik/traefik-prod-no-file-provider.yaml"
    dest: /home/{{ default_user }}/docker_mounts/proxy/traefik/traefik.yaml
    mode: '0664'
    container_name: traefik

# docker container template files
docker_template_files:
  - name: server.yaml
    src: "{{ inventory_dir }}/../files/ntfy/server.yaml"
    dest: /home/{{ default_user }}/docker_mounts/monitoring/ntfy/server.yaml
    mode: '0664'
    container_name: 
    
# docker mounts subfolders
docker_mounts_subfolders:
  - name: postgres
    dest: /home/{{ default_user }}/docker_mounts/monitoring/postgres
    mode: '0775'
    container_name: postgres_db

# docker compose:
docker_compose:
  - compose_name: proxy
    state: present
    networks:
      traefik:
        name: traefik
      docker-proxy:
        name: docker-proxy
    containers:
      - container_name: traefik
        image: traefik:v3.1
        networks:
          - traefik
          - docker-proxy
        environment:
          - TZ=America/Edmonton
          - "CF_API_EMAIL={{ default_user_email }}"
          - "CF_DNS_API_TOKEN={{ secret_cf_token }}"
        ports:
          - 80:80
          - 443:443
        depends_on:
          - docker-socket-proxy
        volumes:
          - "/home/{{ default_user }}/docker_mounts/proxy/traefik:/etc/traefik"
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          - "traefik.http.routers.dashboard.rule=Host(`docker-cloud-01.stechsolutions.ca`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
          - "traefik.http.routers.dashboard.service=api@internal"
          - "traefik.http.routers.dashboard.middlewares=auth"
          - "traefik.http.middlewares.auth.basicauth.users={{ default_user }}:{{ secret_traefik_dashboard_password_hash }}"
          - "traefik.http.routers.dashboard.entrypoints=websecure"
          - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - container_name: docker-socket-proxy
        image: tecnativa/docker-socket-proxy:0.2.0
        networks:
          - docker-proxy
        environment:
          - CONTAINERS=1 # Allow access to viewing containers
          - POST=0 # Disallow any POST operations (effectively read-only)
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
        restart: unless-stopped
  - compose_name: monitoring
    state: present
    networks:
      traefik:
        name: traefik
        external: true
      postgres:
        name: postgres
    containers:
      - container_name: ntfy
        image: binwiederhier/ntfy:v2.11.0
        command: "serve"
        networks:
          - traefik
        healthcheck:
          test: ["CMD-SHELL", "wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1"]
          interval: 60s
          timeout: 10s
          retries: 3
          start_period: 40s
        volumes:
          - "/home/{{ default_user }}/docker_mounts/monitoring/ntfy:/var/lib/ntfy"
          - "/home/{{ default_user }}/docker_mounts/monitoring/ntfy/server.yaml:/etc/ntfy/server.yml"
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          - "traefik.http.routers.ntfy.rule=Host(`ntfy.stechsolutions.ca`)"
          - "traefik.http.services.ntfy.loadbalancer.server.port=80"
          - "traefik.http.routers.ntfy.entrypoints=websecure"
          - "traefik.http.routers.ntfy.tls.certresolver=letsencrypt"
      - container_name: postgres_db
        image: postgres:17
        user: 1000:1000
        networks:
          - postgres
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U {{ hc_db_user }} -d {{ hc_db_name }}"]
          interval: 60s
          timeout: 10s
          retries: 3
          start_period: 40s
        environment:
          - POSTGRES_DB={{ hc_db_name }}
          - POSTGRES_USER={{ hc_db_user }}
          - POSTGRES_PASSWORD={{ secret_hc_db_password }}
        volumes:
          - "/home/{{ default_user }}/docker_mounts/monitoring/postgres:/var/lib/postgresql/data"
          - "/etc/passwd:/etc/passwd:ro"
        restart: unless-stopped
