---
# Extract tokens and labels

# Get the list of ntfy tokens
- name: Check if the ntfy tokens are already created
  community.docker.docker_container_exec:
    container: ntfy
    command: ntfy token list
  register: ntfy_extracted_tokens
  changed_when: false
  tags:
    - ntfy

# Initialize the list of token lines
- name: Initialize the list of token lines
  ansible.builtin.set_fact:
    ntfy_token_lines: []
  tags:
    - ntfy

# Get lines with tokens and labels
- name: Get lines with tokens and labels
  ansible.builtin.set_fact:
    ntfy_token_lines: "{{ ntfy_token_lines | default([]) + [line] }}"
  loop: "{{ ntfy_extracted_tokens.stderr_lines }}"
  loop_control:
    loop_var: line
    index_var: my_index
    label: "{{ my_index }}"
  when: line | regex_search(".*\(.*\)")
  tags:
    - ntfy

# Initialize the list of extracted tokens
- name: Initialize the list of extracted tokens
  ansible.builtin.set_fact:
    ntfy_tokens_extracted: {}
  tags:
    - ntfy

# Extract tokens and labels
- name: Extract token and label
  ansible.builtin.set_fact:
    ntfy_tokens_extracted: "{{ ntfy_tokens_extracted | combine({token_name[0]: token[0]}) }}"
  loop: "{{ ntfy_token_lines }}"
  loop_control:
    loop_var: line
    index_var: my_index
    label: "{{ my_index }}"
  vars:
    token: "{{ line | regex_search('^\\- (tk_[^ ]+) \\(([^)]+)\\)', '\\1') }}"
    token_name: "{{ line | regex_search('^\\- (tk_[^ ]+) \\(([^)]+)\\)', '\\2') }}"
  when: token is not none and token_name is not none
  tags:
    - ntfy
