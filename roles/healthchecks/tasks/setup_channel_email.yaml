---
# Setup channels on Healthchecks for email notifications
#
# Input:
#   - healtchecks_channels_existing: list of channels already created on Healthchecks

# Initialize the list of email channel values
- name: Initialize the list of email channel values
  ansible.builtin.set_fact:
    healthchecks_email_channel_values: {}
  tags:
    - healthchecks

# Loop through the healtcheck channels and fill in the token value.
- name: Set the email token value for the channels
  ansible.builtin.set_fact:
    healthchecks_email_channel_values: "{{ healthchecks_email_channel_values | combine({hc_channel.name: lookup('template', 'email_channel.j2')}) }}"
  vars:
    hc_channel_down: "{{ hc_channel.value_down }}"
    hc_channel_up: "{{ hc_channel.value_up }}"
    hc_channel_value: "{{ hc_channel.value_value }}"
  loop: "{{ hc_channels }}"
  loop_control:
    loop_var: hc_channel
    label: "{{ hc_channel.name }}"
  when: hc_channel.kind == "email"
  tags:
    - healthchecks

# Create the healthchecks channels
- name: Create the healthchecks email channels
  ansible.builtin.command: |
    docker container exec -it healthchecks /opt/healthchecks/manage.py shell -c
    "import json
    from hc.api.models import Channel
    from hc.accounts.models import Project
    project = Project.objects.get(name='{{ channel.project }}')
    channel = Channel(project=project)
    channel.kind = '{{ channel.kind }}'
    channel.value = json.dumps({{ healthchecks_email_channel_values[channel.name] }})
    channel.name = '{{ channel.name }}'
    channel.email_verified = True
    channel.save()"
  when: channel.name not in healtchecks_channels_existing.stdout and channel.kind == "email"
  loop: "{{ hc_channels }}"
  loop_control:
    loop_var: channel
    label: "{{ channel.project }} - {{ channel.kind }}"
  register: healthchecks_channel_create_result
  changed_when: channel.name not in healtchecks_channels_existing.stdout
  tags:
    - healthchecks
