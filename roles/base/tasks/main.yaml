---
# tasks file for base
#
# inputs:
#   - base_additonal_packages: list of additional packages to install
#   - base_additional_services: list of additional services to enable and start
#   - base_reboot_host_if_required: boolean to reboot the host if required
#   - base_apt_upgrade_packages: if or how to upgrade apt packages
#   - base_install_docker: boolean to install docker
#   - base_dotfiles: dictionary of dotfiles configuration

# Update and upgrade apt packages
- name: Update and upgrade apt packages
  ansible.builtin.apt:
    upgrade: "{{ base_apt_upgrade_packages }}"
    update_cache: true
    cache_valid_time: 3600
  become: true
  tags:
    - base
    - base.apt

# install base packages on the host
- name: Install base packages
  ansible.builtin.apt:
    # append the list of packages to install with optional additional packages
    name: "{{ base_packages + (base_additional_packages | default([])) }}"
    state: present
  become: true
  tags:
    - base
    - base.apt

# Check if a reboot is required
- name: Check if a reboot is required
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: base_reboot_required_file
  when: base_reboot_host_if_required is true
  tags:
    - base

# Reboot the host if a reboot is required
- name: Reboot the host if a reboot is required
  ansible.builtin.reboot:
  when:
    base_reboot_host_if_required is true and
    base_reboot_required_file.stat.exists
  become: true
  tags:
    - base

# install docker when the flag is set
- name: Install docker
  ansible.builtin.include_tasks: setup_docker.yaml
  when: base_install_docker is true
  tags:
    - base
    - base.docker

# setup dotfiles when the flag is set
- name: Setup dotfiles
  ansible.builtin.include_tasks: setup_dotfiles.yaml
  when: base_dotfiles['install'] is true
  tags:
    - base
    - base.dotfiles

# set specified systemd services to enabled and started
- name: Set specified systemd services to enabled and started
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop: "{{ base_services + (base_additional_services | default([])) }}"
  become: true
  when: ansible_os_family == "Debian"
  tags:
    - base
    - base.services

# flush all handlers
- name: Flush handlers
  ansible.builtin.meta: flush_handlers
  tags:
    - base
