---
# tasks file for managing known_hosts.
#
# Adds or removes a host from the known_hosts_ansible file
#
# Inputs: The following key and value pairs are required
#     base_hostname: the hostname or ip_address of the host
#     state: present or absent
#     comment: added to the known_hosts_ansible file the line above.

# Check if the host_key is already in the known_hosts_ansible file
- name: Check if the hostname is already in the known_hosts_ansible file
  ansible.builtin.lineinfile:
    path: "{{ known_hosts_ansible_file }}"
    regex: "^{{ base_hostname }}.*"
    state: absent
  check_mode: true
  changed_when: false
  register: base_hostname_check_result

# Wait for the host to be reachable
- name: Wait for the host to be reachable
  ansible.builtin.wait_for:
    host: "{{ base_hostname }}"
    port: 22
    state: started
    timeout: 60
  when: state == 'present' and base_hostname_check_result.found == 0

# Get the host key from the host
- name: Get the host key from the host
  ansible.builtin.command: ssh-keyscan -t rsa {{ base_hostname }}
  register: base_host_key_results
  when: state == 'present' and base_hostname_check_result.found == 0
  delegate_to: localhost
  changed_when: base_host_key_results.stdout_lines | length > 0

# add to the known_hosts_ansible file with the hostname and comment
# note that duplicate entries are not added so if there is multiple
# host keys for the same host, only the first comment will be added
- name: Add comment and hostname to the known_hosts_ansible file
  ansible.builtin.lineinfile:
    path: "{{ known_hosts_ansible_file }}"
    line: "{{ item_line }}"
    state: "{{ state }}"
  with_items:
    - "# {{ comment }}"
    - "{{ base_host_key_results.stdout | default('') }} \n"
  loop_control:
    loop_var: item_line
  when: state == 'present' and base_hostname_check_result.found == 0
  delegate_to: localhost
  no_log: true

# remove the comment and hostname from the known_hosts_ansible file
- name: Remove comment and hostname from the known_hosts_ansible file
  ansible.builtin.replace:
    path: "{{ known_hosts_ansible_file }}"
    regexp: "^# {{ comment }}\n.*\n\n"
    replace: ""
  when: state == 'absent'
  delegate_to: localhost
