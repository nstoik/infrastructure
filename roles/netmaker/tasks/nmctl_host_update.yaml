---
# Update the host definition on the Netmaker server
#
# Also updates each node definition for the host.
#
# Required vars:
#   netmaker_host_name: The name of the host to join to the network
#   netmaker_host_definition: A dictionary of host definition options

- name: Block for netclient joining a network
  tags:
    - netmaker
    - netmaker.netclient
    - netmaker.netclient.join
  block:
    # Get all the hosts from the server
    - name: Get all the hosts from the server
      ansible.builtin.command:
        cmd: nmctl host list -o json
      register: netmaker_join_network_hosts_list
      changed_when: false

    # Get all the nodes from the server
    - name: Get all the nodes from the server
      ansible.builtin.command:
        cmd: nmctl node list -o json
      register: netmaker_join_network_nodes_list
      changed_when: false

    # Filter the hosts to only netmaker_host_name
    - name: Filter the hosts to only {{ netmaker_host_name }}
      ansible.builtin.set_fact:
        netmaker_host: "{{ netmaker_join_network_hosts_list.stdout
                          | from_json
                          | selectattr('name', 'equalto', netmaker_host_name)
                          | first }}"

    # Filter the nodes to only the ones from the netmaker_host_name
    - name: Filter the nodes to only the ones from {{ netmaker_host_name }}
      ansible.builtin.set_fact:
        netmaker_host_nodes: "{{ netmaker_join_network_nodes_list.stdout
                                | from_json
                                | selectattr('hostid',
                                              'equalto',
                                              netmaker_host.id)
                                | list }}"

    # Add node IDs to the list of nodes
    - name: Add node IDs to the list of nodes
      ansible.builtin.set_fact:
        node_settings: "{{ node_settings | default([]) +
                          [item_node_settings | combine({'id': item_node.id})] }}"
      loop: "{{ netmaker_host_definition.node_settings }}"
      loop_control:
        loop_var: item_node_settings
      vars:
        item_node: "{{ netmaker_host_nodes | json_query(query_node) | first }}"
        query_node: "[?network=='{{ item_node_settings.network }}']"
      when: netmaker_host is defined

    # Set the host as a default host if it is defined as such
    - name: Set the host as a default host if it is defined as such
      ansible.builtin.command:
        cmd: nmctl host update {{ netmaker_host.id }} --default
      when: netmaker_host_definition.isdefault is true
      changed_when: false

    # Update the node definitions for each node of the host
    - name: Update the node definitions for each node of the host
      ansible.builtin.include_tasks: nmctl_node_update.yaml
      vars:
        netmaker_node_definition: "{{ item_node }}"
      loop: "{{ node_settings }}"
      loop_control:
        label: "network name: {{ item_node.network }}"
        loop_var: item_node
      when: netmaker_host is defined
