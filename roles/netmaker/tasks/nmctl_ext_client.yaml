---
# Use the NMCTL CLI tool to create or update external clients
# on the Netmaker server as required.
#
# input vars:
#  netmaker_ext_clients_list: a list of external client definitions

# Get the current list of external clients
- name: Get the current list of external clients
  ansible.builtin.command:
    cmd: "nmctl ext_client list -o json"
  register: netmaker_current_ext_client_list
  changed_when: false

# Get all the hosts from the server
- name: Get all the hosts from the server
  ansible.builtin.command:
    cmd: nmctl host list -o json
  register: netmaker_external_client_hosts_list
  changed_when: false

# Get all the nodes from the server
- name: Get all the nodes from the server
  ansible.builtin.command:
    cmd: nmctl node list -o json
  register: netmaker_external_client_nodes_list
  changed_when: false

# If netmaker_current_ext_client_list.stdout is null, set it to an empty list
#
# This is to handle the edge case where there are no external clients
# currently defined on the server.
- name: If netmaker_current_ext_client_list is null, set it to an empty list
  ansible.builtin.set_fact:
    netmaker_current_ext_client_list:
      stdout: "[]"
  when: netmaker_current_ext_client_list.stdout == "null"

# Build the list of current external clients
- name: Build the list of current external clients
  ansible.builtin.set_fact:
    netmaker_client_list: "{{ netmaker_client_list | default([]) +
                            [{'clientid': item_ext.clientid,
                              'network': item_node.network,
                              'nodeid': item_node.id,
                              'hostid': item_node.hostid,
                              'hostname': item_host.name}] }}"
  loop: "{{ netmaker_current_ext_client_list.stdout }}"
  loop_control:
    loop_var: item_ext
    label: "{{ item_ext.clientid }} {{ item_ext.network }}"
  vars:
    item_node: "{{ netmaker_external_client_nodes_list.stdout | from_json
                    | json_query(query_node) | first }}"  # noqa: var-naming[no-role-prefix] yaml[line-length]
    item_host: "{{ netmaker_external_client_hosts_list.stdout | from_json
                    | json_query(query_host) | first }}"  # noqa: var-naming[no-role-prefix] yaml[line-length]
    query_node: "[?id == '{{ item_ext.ingressgatewayid }}']"  # noqa: var-naming[no-role-prefix] yaml[line-length]
    query_host: "[?id == '{{ item_node.hostid }}']"  # noqa: var-naming[no-role-prefix] yaml[line-length]

# Define netmaker_client_list as a default list if it doesn't exist
- name: Define netmaker_client_list as a default list if it doesn't exist
  ansible.builtin.set_fact:
    netmaker_client_list:
      - clientid: "null"
        network: "null"
        nodeid: "null"
        hostid: "null"
        hostname: "null"
  when: netmaker_client_list is not defined

# Add the host id to the netmaker_ext_clients_list list
- name: Add host id to the netmaker_ext_clients_list list
  ansible.builtin.set_fact:
    ext_clients_new: "{{ ext_clients_new | default([]) +
                         [item_ext | combine({'hostid': item_host.id})] }}"
  loop: "{{ netmaker_ext_clients_list }}"
  loop_control:
    loop_var: item_ext
    label: "{{ item_ext.name }} with host ID {{ item_host.id }}"
  vars:
    item_host: "{{ netmaker_external_client_hosts_list.stdout | from_json
                  | json_query(query_host) | first }}"  # noqa: var-naming[no-role-prefix] yaml[line-length]
    query_host: "[?name == '{{ item_ext.host }}']"  # noqa: var-naming[no-role-prefix] yaml[line-length]

# Create the external client if it doesn't exist
- name: Create the external client if it doesn't exist
  ansible.builtin.include_tasks: nmctl_ext_client_create.yaml
  loop: "{{ ext_clients_new }}"
  loop_control:
    label: "{{ item.name }} and network {{ item.network }}"
  when: >
    netmaker_client_list
    | selectattr('clientid', 'equalto', item.name)
    | selectattr('network', 'equalto', item.network)
    | list
    | length == 0
  vars:
    node: "{{ netmaker_external_client_nodes_list.stdout | from_json
              | json_query(query_node) | first }}"  # noqa: var-naming[no-role-prefix] yaml[line-length]
    query_node: "[?network == '{{ item.network }}' &&
                  hostid == '{{ item.hostid }}']"  # noqa: var-naming[no-role-prefix] yaml[line-length]
