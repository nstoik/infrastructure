---
# Use the NMCTL CLI tool to set ACLs on the Netmaker server.
#
# input vars:
#  netmaker_acl_network: the network to set the ACLs for

- name: Block for Netmaker ACLs
  tags:
    - netmaker
    - netmaker.acl
  block:

    # Get all the hosts from the server
    - name: Get all the hosts from the server
      ansible.builtin.command:
        cmd: nmctl host list -o json
      register: netmaker_hosts_list
      changed_when: false

    - name: Get the names and IDs of the hosts
      ansible.builtin.set_fact:
        host_ids: "{{ host_ids
                    | default({})
                    | combine({acl_loop.id: acl_loop.name}) }}"
      loop: "{{ netmaker_hosts_list.stdout }}"
      loop_control:
        label: "{{ acl_loop.name }}"
        loop_var: acl_loop

    - name: Get all the nodes from the server
      ansible.builtin.command:
        cmd: nmctl node list -o json
      register: netmaker_nodes_list
      changed_when: false

    # Only get nodes that match the network
    - name: Only get nodes that match the network
      ansible.builtin.set_fact:
        netmaker_nodes_list: "{{ netmaker_nodes_list.stdout
                               | from_json
                               | selectattr('network',
                                            'equalto',
                                            netmaker_acl_network)
                               | list }}"

    - name: Get the ids and hostids of the nodes
      ansible.builtin.set_fact:
        node_ids: "{{ node_ids
                    | default({})
                    | combine({acl_loop.id: acl_loop.hostid}) }}"
      loop: "{{ netmaker_nodes_list }}"
      loop_control:
        label: "{{ acl_loop.id }}"
        loop_var: acl_loop

    # Connect the hostids with the host names
    - name: Connect the hostids with the host names
      ansible.builtin.set_fact:
        node_id_translation: "{{ node_id_translation
                               | default({})
                               | combine({host_ids[acl_loop.value]:
                                                   acl_loop.key}) }}"
      loop: "{{ node_ids | dict2items }}"
      loop_control:
        label: "{{ host_ids[acl_loop.value] }}"
        loop_var: acl_loop

    # Get the current list of ACLs
    - name: Get the current list of ACLs
      ansible.builtin.command:
        cmd: "nmctl acl list {{ netmaker_acl_network }} -o json"
      register: netmaker_acl_list
      changed_when: false

    # Remove any rows that are external clients
    - name: Remove any rows that are external clients
      ansible.builtin.set_fact:
        netmaker_acl_list_filtered: "{{ netmaker_acl_list.stdout
                                      | from_json
                                      | dict2items
                                      | rejectattr('key', 'in', ext_clients
                                                   | map(attribute='name')
                                                   | list)
                                      | items2dict }}"

    # Go through each ACL and remove any external clients
    - name: Go through each ACL and remove any external clients
      ansible.builtin.set_fact:
        acls: "{{ acls
                | default({})
                | combine({acl_loop.key: acl_loop.value
                                       | dict2items
                                       | rejectattr('key', 'in', ext_clients
                                                   | map(attribute='name')
                                                   | list)
                                       | items2dict}) }}"
      loop: "{{ netmaker_acl_list_filtered | dict2items }}"
      loop_control:
        label: "{{ acl_loop.key }}"
        loop_var: acl_loop

    # Set the ACLs
    - name: Set the ACLs for each node
      ansible.builtin.include_tasks: nmctl_acl_update.yaml
      vars:
        netmaker_acl_name: "{{ lookup('dict', acl_loop).key }}"
        netmaker_acl_nodes: "{{ lookup('dict', acl_loop).value }}"
        netmaker_network: "{{ netmaker_acl_network }}"
        netmaker_acl_translation: "{{ node_id_translation }}"
        netmaker_existing_acls: "{{ acls }}"
      loop: "{{ netmaker_acls[netmaker_acl_network] }}"
      loop_control:
        loop_var: acl_loop
