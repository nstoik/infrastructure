version: "3.4"

services:
  netmaker:
    container_name: netmaker
{% if netmaker_ee_use_ee_image %}
    image: gravitl/netmaker:{{ netmaker_version }}-ee
{% else %}
    image: gravitl/netmaker:{{ netmaker_version }}
{% endif %}
    env_file:
      - {{ netmaker_directory }}/netmaker.env
    restart: unless-stopped
    volumes:
      - dnsconfig:/root/config/dnsconfig
      - sqldata:/root/data
    environment:
      # config-dependant vars
      - STUN_LIST=stun1.netmaker.io:3478,stun2.netmaker.io:3478,stun1.l.google.com:19302,stun2.l.google.com:19302
      # The domain/host IP indicating the mq broker address
      - BROKER_ENDPOINT=wss://broker.{{ netmaker_base_domain }} # For EMQX broker use `BROKER_ENDPOINT=wss://broker.{{ netmaker_base_domain }}/mqtt`
      # For EMQX broker (uncomment the two lines below)
      #- BROKER_TYPE=emqx
      #- EMQX_REST_ENDPOINT=http://mq:18083
      # The base domain of netmaker
      - SERVER_NAME={{ netmaker_base_domain }}
      - SERVER_API_CONN_STRING=api.{{ netmaker_base_domain }}:443
      # Address of the CoreDNS server. Defaults to SERVER_HOST
      - COREDNS_ADDR={{ ansible_default_ipv4.address }}
      # Overrides SERVER_HOST if set. Useful for making HTTP available via different interfaces/networks.
      - SERVER_HTTP_HOST=api.{{ netmaker_base_domain }}
      # domain for your turn server
      - TURN_SERVER_HOST=turn.{{ netmaker_base_domain }}
      # domain of the turn api server
      - TURN_SERVER_API_HOST=https://turnapi.{{ netmaker_base_domain }}

  netmaker-ui:
    container_name: netmaker-ui
    image: gravitl/netmaker-ui:{{ netmaker_version }}
    env_file:
      - {{ netmaker_directory }}/netmaker.env
    environment:
      # config-dependant vars
      # URL where UI will send API requests. Change based on SERVER_HOST, SERVER_HTTP_HOST, and API_PORT
      - BACKEND_URL=https://api.{{ netmaker_base_domain }}
    depends_on:
      - netmaker
    links:
      - "netmaker:api"
    restart: always

  caddy:
    image: caddy:2.6.2
    container_name: caddy
    env_file:
      - {{ netmaker_directory }}/netmaker.env
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - {{ netmaker_directory }}/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_conf:/config
    ports:
      - "80:80"
      - "443:443"

  coredns:
    container_name: coredns
    image: coredns/coredns
    command: -conf /root/dnsconfig/Corefile
    depends_on:
      - netmaker
    restart: always
    volumes:
      - dnsconfig:/root/dnsconfig

  mq:
    container_name: mq
    image: eclipse-mosquitto:2.0.15-openssl
    env_file:
      - {{ netmaker_directory }}/netmaker.env
    depends_on:
      - netmaker
    restart: unless-stopped
    command: ["/mosquitto/config/wait.sh"]
    volumes:
      - {{ netmaker_directory }}/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - {{ netmaker_directory }}/wait.sh:/mosquitto/config/wait.sh
      - mosquitto_logs:/mosquitto/log
      - mosquitto_data:/mosquitto/data

  turn:
    container_name: turn
    image: gravitl/turnserver:v1.0.0
    restart: unless-stopped
    env_file:
      - {{ netmaker_directory }}/netmaker.env
    environment:
      # config-dependant vars
      - USERNAME={{ netmaker_turn_username }}
      - PASSWORD={{ secret_nm_turn_password }}
      # domain for your turn server
      - TURN_SERVER_HOST=turn.{{ netmaker_base_domain }}
    network_mode: "host"
    volumes:
      - turn_server:/etc/config

volumes:
  caddy_data: { } # runtime data for caddy
  caddy_conf: { } # configuration file for Caddy
  sqldata: { }
  dnsconfig: { } # storage for coredns
  mosquitto_logs: { } # storage for mqtt logs
  mosquitto_data: { } # storage for mqtt data
  turn_server: { }