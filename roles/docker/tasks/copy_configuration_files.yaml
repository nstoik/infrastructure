---
# Copy any required configuration files for the docker containers

# Create a list of docker containers to restart
- name: Create a list of docker containers to restart
  ansible.builtin.set_fact:
    docker_containers_to_restart: []
  tags:
    - docker
    - docker.compose

# create any docker mounts subdirectories if required
- name: Create any docker mounts subdirectories if required
  ansible.builtin.file:
    path: "{{ folder.dest }}"
    state: directory
    mode: "{{ folder.mode }}"
    owner: "{{ folder.owner | default(default_user) }}"
    group: "{{ folder.group | default(default_user) }}"
  loop: "{{ docker_mounts_subfolders }}"
  loop_control:
    loop_var: folder
    label: "{{ folder.name }}"
  when: docker_config is true and docker_mounts_subfolders is defined
  tags:
    - docker
    - docker.compose

# block for copying configuration paths
- name: Copy any required configuration files for the docker containers from a path
  tags:
    - docker
    - docker.compose
  when: docker_config is true and docker_configuration_paths is defined
  block:
    # find all the files in the path
    - name: Find all the files in the path
      ansible.builtin.find:
        paths: "{{ path.src }}"
        recurse: true
        file_type: file
      loop: "{{ docker_configuration_paths }}"
      loop_control:
        loop_var: path
        label: "{{ path.name }}"
      delegate_to: localhost
      register: paths_file_list

    # Extract the list of file paths
    - name: Extract the list of file paths
      ansible.builtin.set_fact:
        paths_file_extracted: >-
          {{
            paths_file_extracted | default([])
            + [path_results.files | map(attribute='path') | list]
          }}
      loop: "{{ paths_file_list.results }}"
      loop_control:
        loop_var: path_results
        label: "{{ path_results.path.name }}"

    # Get the file path that is relative to the source directory
    - name: Get the file path that is relative to the source directory
      ansible.builtin.set_fact:
        paths_relative: >-
              {{
              paths_relative | default([])
              + [path.1 | map('regex_replace', '^' + path.0.src + '/', '') | list]
              }}
      loop: "{{ docker_configuration_paths | zip(paths_file_extracted) | list }}"
      loop_control:
        loop_var: path
        label: "{{ path.0.name }}"

    # Build the updated list of files with the relative paths
    - name: Build the updated list of files with the relative paths
      ansible.builtin.set_fact:
        docker_configuration_paths_updated: >-
              {{
                docker_configuration_paths_updated | default([]) |
                rejectattr('name', 'equalto', path['name']) | list +
                [ path | combine({ 'paths': paths_relative[path_index] }) ]
              }}
      loop: "{{ docker_configuration_paths }}"
      loop_control:
        loop_var: path
        label: "{{ path.name }}"
        index_var: path_index

    # Call the copy_paths task to copy the files
    - name: Call the copy_paths task to copy the files
      ansible.builtin.include_role:
        name: docker
        tasks_from: copy_paths
      vars:
        docker_configuration_path: "{{ config }}"
      loop: "{{ docker_configuration_paths_updated }}"
      loop_control:
        loop_var: config
        label: "{{ config.name }}"

# block for copying configuration files
- name: Copy any required configuration files for the docker containers from a list
  tags:
    - docker
    - docker.compose
  when: docker_config is true and docker_configuration_files is defined
  block:
    # loop through the list of docker configuration files
    - name: Loop through the list of docker configuration files
      ansible.builtin.include_role:
        name: docker
        tasks_from: copy_or_template
      vars:
        docker_file:
          name: "{{ docker_configuration_file.name }}"
          src: "{{ docker_configuration_file.src }}"
          dest: "{{ docker_configuration_file.dest }}"
          mode: "{{ docker_configuration_file.mode }}"
          container_name: "{{ docker_configuration_file.container_name }}"
      loop: "{{ docker_configuration_files }}"
      loop_control:
        loop_var: docker_configuration_file
        label: "{{ docker_configuration_file.container_name }} - {{ docker_configuration_file.name }}"

# remove any duplicates from the list of docker containers to restart
- name: Remove any duplicates from the list of docker containers to restart
  ansible.builtin.set_fact:
    docker_containers_to_restart: "{{ docker_containers_to_restart | unique }}"
  tags:
    - docker
    - docker.compose
