---
# This playbook will setup all the specified VMs. It will update the DNS
# entries in Pi-hole and then create the VMs in Proxmox.It will then start
# the VMs and wait for them to be ready. Once the VMs are ready, it will
# update the known_hosts file for the IP and hostname.
#
# After the VMs are ready, it will run the first time setup to configure
# the base VMs.

# Run the pihole playbook to make sure the DNS records are correct
- name: Run the pihole role
  ansible.builtin.import_playbook: "../../playbooks/pihole.yaml"
  tags:
    - pihole
    - proxmox
    - proxmox.vm
    - proxmox.vm.create
    - base.known_hosts

# Run the proxmox role
- name: Run the proxmox role
  hosts: proxmox_nodes
  vars_files:
    - ../../vault/vault.yaml
  tags:
    - proxmox
    - proxmox.vm
    - proxmox.vm.create

  tasks:
    # This creates the VMs
    - name: Run the proxmox role to create VMs
      ansible.builtin.include_role:
        name: proxmox
        tasks_from: create_vm
      vars:
        proxmox_template_id: "{{ hostvars[item].proxmox_vm.template_id }}"
        proxmox_vm: "{{ hostvars[item].proxmox_vm }}"
      loop: "{{ groups['proxmox_vms'] }}"

    # Start the VMs and wait for them to be ready
    - name: Run the proxmox role to start VMs
      ansible.builtin.include_role:
        name: proxmox
        tasks_from: start_vm
      vars:
        proxmox_vm: "{{ hostvars[item].proxmox_vm }}"
        proxmox_ip: "{{ hostvars[item].network.ip }}"
      loop: "{{ groups['proxmox_vms'] }}"

# Run the first time setup to configure the VMs
- name: Run the first time setup to configure VMs
  hosts: proxmox_vms
  vars_files:
    - ../../vault/vault.yaml
  tags:
    - proxmox
    - proxmox.vm
    - proxmox.vm.create
    - base

  tasks:
    # Run the base role
    - name: Import base role
      ansible.builtin.import_role:
        name: base
      vars:
        # yamllint disable-line rule:line-length
        base_additional_packages: "{{ hostvars[inventory_hostname].proxmox_vm_additonal_packages }}"
        # yamllint disable-line rule:line-length
        base_additional_services: "{{ hostvars[inventory_hostname].proxmox_vm_additional_services }}"
        base_install_docker: "{{ hostvars[inventory_hostname].install_docker }}"
        base_dotfiles: "{{ hostvars[inventory_hostname].dotfiles }}"
        base_postfix: "{{ hostvars[inventory_hostname].postfix }}"
      tags:
        - base
        - base.apt
        - base.docker
        - base.dotfiles
        - base.known_hosts
        - base.postfix

    # Run the geerlingguy.security role
    - name: Import geerlingguy.security role
      ansible.builtin.import_role:
        name: geerlingguy.security
      become: true
      tags:
        - base.geerlingguy.security

    # Run the fileserver role
    - name: Import fileserver role
      ansible.builtin.import_role:
        name: fileserver
      when:
        hostvars[inventory_hostname].fileserver_setup is defined and
        hostvars[inventory_hostname].fileserver_setup is true
      tags:
        - fileserver
        - fileserver.nfs-server
        - fileserver.nfs-client
        - fileserver.mergerfs
        - fileserver.ext4
        - fileserver.snapraid
        - fileserver.zfs
