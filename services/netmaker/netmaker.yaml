---
# Set up a VPS on DigitalOcean and configure the Netmaker application.
# This sets up a single node Netmaker server.and applies the default
# settings. It also configures the DNS records on Cloudflare.
# Additional work would be needed to account for load balancing if
# a multiple node setup is desired.


# The first group of tasks either creates or destroys the DigitalOcean
# Droplet and Cloudflare DNS record. The second group of tasks only
# runs if the DigitalOcean Droplet is created.
- name: Create Netmaker Droplet
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/vault.yaml
    - vars/main.yaml
    - vars/netmaker.yaml

  tasks:
    - name: Configure block storage on digitalocean
      ansible.builtin.include_role:
        name: digitalocean
        tasks_from: create_block_storage
      vars:
        digitalocean_volume:
          - "{{ netmaker_volume }}"

    - name: Configure DigitalOcean Droplet
      ansible.builtin.include_role:
        name: digitalocean
      vars:
        droplet: "{{ netmaker_droplet }}"

    - name: Get the Netmaker Droplet public IP address
      ansible.builtin.set_fact:
        do_ip_address: >-
          {{ droplet_result.data.droplet.networks.v4 |
              selectattr('type','eq','public') |
              map(attribute='ip_address') |
              first
          }}
      when: netmaker_droplet.state == "present"
      no_log: true

    - name: Configure Cloudflare DNS Record
      ansible.builtin.include_role:
        name: cloudflare
      vars:
        ip_address: "{{ do_ip_address | default('') }}"
        cf_record: "{{ netmaker_cf_record }}"

    - name: Configure Cloudflare DNS Record for EE
      ansible.builtin.include_role:
        name: cloudflare
      vars:
        ip_address: "{{ do_ip_address | default('') }}"
        cf_record: "{{ netmaker_cf_ee_record }}"
      when: netmaker_ee


# The plays below will only run when the hosts group do_netmaker
# is defined and there is at least one host in the group
- name: Initial Setup of Netmaker Droplet
  hosts: do_netmaker
  gather_facts: false
  vars_files:
    - vars/vault.yaml
    - vars/main.yaml
    - vars/netmaker.yaml

  tasks:
    # Get the changed status from the droplet creation play
    # The create_user_flag will either be 'true' or 'false'.
    # This is used to determine if the user needs to be created the first time
    # If the status is not changed, the create_user play will not run.
    #
    # The hostvars['localhost']['droplet_result'] list contains
    # a dictionary with the keys 'changed', 'data', 'failed'.
    - name: Get the changed status from the droplet_result variable
      ansible.builtin.set_fact:
        create_user_flag: >-
          {{ hostvars['localhost']['droplet_result']['changed'] }}
      no_log: true

    - name: Import create_user role from digitalocean
      ansible.builtin.include_role:
        name: digitalocean
        tasks_from: create_user
      when: create_user_flag
      vars:
        ansible_ssh_host_key_checking: false

    # Format the block storage if required. Set it to be automatically mounted
    - name: Format the block storage
      ansible.builtin.include_role:
        name: digitalocean
        tasks_from: format_block_storage
      vars:
        digitalocean_volume:
          - "{{ netmaker_volume }}"

- name: Additional Setup of Netmaker Droplet
  hosts: do_netmaker
  gather_facts: true
  vars_files:
    - vars/vault.yaml
    - vars/main.yaml
    - vars/netmaker.yaml
  roles:
    - role: geerlingguy.security
      become: true

  tasks:
    - name: Import main role from base
      ansible.builtin.include_role:
        name: base
      vars:
        install_docker: true
        dotfiles:
          install: true
          dotbot_skip_ssh_authorized_file: true

    - name: Set iptables policy to FORWARD ACCEPT
      ansible.builtin.iptables:
        chain: FORWARD
        policy: ACCEPT
      become: true

    - name: Create the Netmaker directory
      ansible.builtin.file:
        path: "{{ netmaker_directory }}"
        state: directory
        mode: 0755

    - name: Get docker compose file for netmaker
      ansible.builtin.get_url:
        url: "{{ netmaker_docker_compose_url }}"
        dest: "{{ netmaker_docker_compose_path }}"
        owner: "{{ default_user }}"
        group: "{{ default_user }}"
        mode: 0644

    - name: Replace the default values in the docker-compose file
      ansible.builtin.replace:
        path: "{{ netmaker_docker_compose_path }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      loop:
        - regexp: "NETMAKER_BASE_DOMAIN"
          replace: "{{ netmaker_base_domain }}"
        - regexp: "SERVER_PUBLIC_IP"
          replace: "{{ ansible_default_ipv4.address }}"
        - regexp: "YOUR_EMAIL"
          replace: "{{ default_user_email }}"
        - regexp: "REPLACE_MASTER_KEY"
          replace: "tetst_key"
        - regexp: "REPLACE_MQ_ADMIN_PASSWORD"
          replace: "replace_password"
