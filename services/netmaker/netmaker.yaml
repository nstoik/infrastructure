---
# Set up a VPS on DigitalOcean and configure the Netmaker application.
# This sets up a single node Netmaker server.and applies the default
# settings. It also configures the DNS records on Cloudflare.
# Additional work would be needed to account for load balancing if
# a multiple node setup is desired.

# The first group of tasks either creates or destroys the DigitalOcean
# Droplet and Cloudflare DNS record. The remaining group of tasks only
# runs if the DigitalOcean Droplet is created.
- name: Create Netmaker Droplet
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../../vars/vault.yaml
    - ../../vars/main.yaml
    - ../../vars/netmaker.yaml

  tasks:
    - name: Configure block storage on digitalocean
      ansible.builtin.include_role:
        name: digitalocean
        tasks_from: create_block_storage
      vars:
        digitalocean_volume:
          - "{{ netmaker_volume }}"

    - name: Configure DigitalOcean Droplet
      ansible.builtin.include_role:
        name: digitalocean
      vars:
        digitalocean_droplet: "{{ netmaker_droplet }}"

    - name: Get the Netmaker Droplet public IP address
      ansible.builtin.set_fact:
        do_ip_address: >-
          {{ digitalocean_droplet_result.data.droplet.networks.v4 |
              selectattr('type','eq','public') |
              map(attribute='ip_address') |
              first
          }}
      when: netmaker_droplet.state == "present"
      no_log: true

    - name: Configure Cloudflare DNS Record
      ansible.builtin.include_role:
        name: cloudflare
      vars:
        cloudflare_ip_address: "{{ do_ip_address | default('') }}"
        cloudflare_record: "{{ netmaker_cf_record }}"

    - name: Update the known_hosts file
      ansible.builtin.include_role:
        name: base
        tasks_from: update_known_hosts
      vars:
        base_hostname: "{{ item }}"
        base_state: "{{ netmaker_droplet.state }}"
        base_comment: "DO Netmaker Droplet: {{ netmaker_droplet.name }}"
      loop:
        - "{{ do_ip_address | default('') }}"
        - "{{ netmaker_base_domain }}"


# The plays below will only run when the hosts group do_netmaker
# is defined and there is at least one host in the group
- name: Initial Setup of Netmaker Droplet
  hosts: do_netmaker
  gather_facts: false
  vars_files:
    - ../../vars/vault.yaml
    - ../../vars/main.yaml
    - ../../vars/netmaker.yaml

  tasks:
    # Get the changed status from the droplet creation play
    # The create_user_flag will either be 'true' or 'false'.
    # This is used to determine if the user needs to be created the first time
    # If the status is not changed, the create_user play will not run.
    #
    # The hostvars['localhost']['digitalocean_droplet_result'] list contains
    # a dictionary with the keys 'changed', 'data', 'failed'.

    - name: Get the changed status from the digitalocean_droplet_result variable
      ansible.builtin.set_fact:
        create_user_flag: >-
          {{ hostvars['localhost']['digitalocean_droplet_result']['changed'] }}
      no_log: true

    - name: Import create_user role from digitalocean
      ansible.builtin.include_role:
        name: digitalocean
        tasks_from: create_user
      when: create_user_flag

    - name: Import install_agent role from digitalocean
      ansible.builtin.include_role:
        name: digitalocean
        tasks_from: install_agent

    # Format the block storage if required. Set it to be automatically mounted
    # The user has to be created before the block storage can be formatted.
    - name: Format the block storage
      ansible.builtin.include_role:
        name: digitalocean
        tasks_from: format_block_storage
      vars:
        digitalocean_volume:
          - "{{ netmaker_volume }}"

    # Wait for any unattended upgrades to finish
    - name: Wait for unattended upgrades to finish
      ansible.builtin.include_role:
        name: base
        tasks_from: wait_for_unattended_upgrade

- name: Additional Setup of Netmaker Droplet
  hosts: do_netmaker
  gather_facts: true
  vars_files:
    - ../../vars/vault.yaml
    - ../../vars/main.yaml
    - ../../vars/netmaker.yaml
  roles:
    - role: geerlingguy.security
      become: true

  tasks:
    - name: Import main role from base
      ansible.builtin.include_role:
        name: base
      vars:
        base_additional_packages:
          - jq
          - dnsutils
        install_docker: true
        base_dotfiles:
          install: true
          dotbot_skip_ssh_authorized_file: true

    - name: Set iptables policy to FORWARD ACCEPT
      ansible.builtin.iptables:
        chain: FORWARD
        policy: ACCEPT
      become: true

    - name: Create the Netmaker directory
      ansible.builtin.file:
        path: "{{ netmaker_directory }}"
        state: directory
        owner: "{{ default_user }}"
        group: "{{ default_user }}"
        mode: 0766

    # Copy the Netmaker MQ configuration file
    - name: Copy the Netmaker MQ configuration file
      ansible.builtin.copy:
        src: "mosquitto.conf"
        dest: "{{ netmaker_directory }}/mosquitto.conf"
        mode: 0666
      notify: Restart Netmaker

    # Copy the Netmaker wait script
    - name: Copy the Netmaker wait script
      ansible.builtin.copy:
        src: "wait.sh"
        dest: "{{ netmaker_directory }}/wait.sh"
        mode: 0777
      notify: Restart Netmaker

    # Write the Caddyfile
    - name: Write the Caddyfile
      ansible.builtin.template:
        src: Caddyfile.j2
        dest: "{{ netmaker_directory }}/Caddyfile"
        mode: 0666
      when: not netmaker_ee
      notify: Restart Netmaker

    # Write the enterprise Caddyfile
    - name: Write the enterprise Caddyfile
      ansible.builtin.template:
        src: Caddyfile_ee.j2
        dest: "{{ netmaker_directory }}/Caddyfile"
        mode: 0666
      when: netmaker_ee
      notify: Restart Netmaker

    # Write the netmaker environment file
    - name: Write the netmaker environment file
      ansible.builtin.template:
        src: netmaker.env.j2
        dest: "{{ netmaker_directory }}/netmaker.env"
        mode: 0666
      notify: Restart Netmaker

    # Write the  docker-compose file
    - name: Write the docker-compose file
      ansible.builtin.template:
        src: docker-compose.yml.j2
        dest: "{{ netmaker_directory }}/docker-compose.yml"
        mode: 0666
      when: not netmaker_ee
      notify: Restart Netmaker

    # Write the enterprise docker-compose file
    - name: Write the docker-compose.override file (enterprise)
      ansible.builtin.template:
        src: docker-compose-ee.yml.j2
        dest: "{{ netmaker_directory }}/docker-compose.override.yml"
        mode: 0666
      when: netmaker_ee
      notify: Restart Netmaker

    # Remove the enterprise docker-compose file if not ee edition
    - name: Remove the docker-compose.override file (enterprise)
      ansible.builtin.file:
        path: "{{ netmaker_directory }}/docker-compose.override.yml"
        state: absent
      when: not netmaker_ee
      notify: Restart Netmaker

  handlers:
    - name: Import netmaker handler
      ansible.builtin.import_tasks: handlers/main.yaml
