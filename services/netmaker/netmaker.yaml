---
# Set up a VPS on DigitalOcean and configure the Netmaker application.
# This sets up a single node Netmaker server.and applies the default
# settings. It also configures the DNS records on Cloudflare.
# Additional work would be needed to account for load balancing if
# a multiple node setup is desired.

# The first group of tasks either creates or destroys the DigitalOcean
# Droplet and Cloudflare DNS record. The remaining group of tasks only
# runs if the DigitalOcean Droplet is created.
- name: Create Netmaker Droplet
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../../vault/vault.yaml
    - vars/netmaker.yaml
    - vars/cloudflare.yaml
  tags:
    - netmaker.full_setup

  tasks:
    - name: Configure block storage on digitalocean
      ansible.builtin.include_role:
        name: digitalocean
        tasks_from: create_block_storage
      vars:
        digitalocean_volumes:
          - "{{ netmaker_volume }}"
      tags:
        - digitalocean
        - digitalocean.storage

    - name: Configure DigitalOcean Droplet
      ansible.builtin.include_role:
        name: digitalocean
      vars:
        digitalocean_droplet: "{{ netmaker_droplet }}"
      tags:
        - cloudflare
        - digitalocean
        - digitalocean.droplet

    - name: Get the Netmaker Droplet public IP address
      ansible.builtin.set_fact:
        do_ip_address: >-
          {{ digitalocean_droplet_result.data.droplet.networks.v4 |
              selectattr('type','eq','public') |
              map(attribute='ip_address') |
              first
          }}
      when: netmaker_droplet.state == "present"
      no_log: true
      tags:
        - digitalocean
        - cloudflare

    - name: Configure Cloudflare DNS Record
      ansible.builtin.include_role:
        name: cloudflare
      vars:
        cloudflare_ip_address: "{{ do_ip_address | default('') }}"
        cloudflare_record: "{{ netmaker_cf_record }}"
      tags:
        - cloudflare

    - name: Update the known_hosts file
      ansible.builtin.include_role:
        name: base
        tasks_from: update_known_hosts
      vars:
        base_hostname: "{{ item }}"
        base_state: "{{ netmaker_droplet.state }}"
        base_comment: "DO Netmaker Droplet: {{ netmaker_droplet.name }}"
      loop:
        - "{{ do_ip_address | default('') }}"
        - "{{ netmaker_base_domain }}"
      tags:
        - base
        - base.known_hosts


# The plays below will only run when the hosts group do_netmaker
# is defined and there is at least one host in the group
- name: Initial Setup of Netmaker Droplet
  hosts: do_netmaker
  gather_facts: false
  vars_files:
    - ../../vault/vault.yaml
    - vars/netmaker.yaml
  tags:
    - netmaker.full_setup

  tasks:
    # Get the changed status from the droplet creation play
    # The create_user_flag will either be 'true' or 'false'.
    # This is used to determine if the user needs to be created the first time
    # If the status is not changed, the create_user play will not run.
    #
    # The hostvars['localhost']['digitalocean_droplet_result'] list contains
    # a dictionary with the keys 'changed', 'data', 'failed'.

    - name: Get the changed status from the digitalocean_droplet_result variable
      ansible.builtin.set_fact:
        create_user_flag: >-
          {{ hostvars['localhost']['digitalocean_droplet_result']['changed'] }}
      no_log: true
      tags:
        - digitalocean

    - name: Import create_user role from digitalocean
      ansible.builtin.include_role:
        name: digitalocean
        tasks_from: create_user
      when: create_user_flag
      tags:
        - digitalocean
        - digitalocean.user

    - name: Import install_agent role from digitalocean
      ansible.builtin.include_role:
        name: digitalocean
        tasks_from: install_agent
      tags:
        - digitalocean

    # Format the block storage if required. Set it to be automatically mounted
    # The user has to be created before the block storage can be formatted.
    - name: Format the block storage
      ansible.builtin.include_role:
        name: fileserver
        tasks_from: setup_disks
      vars:
        fileserver_attached_disks: "{{ netmaker_droplet.volumes[0] }}"
      tags:
        - digitalocean
        - digitalocean.storage

    # Wait for any unattended upgrades to finish
    - name: Wait for unattended upgrades to finish
      ansible.builtin.include_role:
        name: base
        tasks_from: wait_for_unattended_upgrade
      tags:
        - base
        - base.apt

- name: Additional Setup of Netmaker Droplet
  hosts: do_netmaker
  gather_facts: true
  vars_files:
    - ../../vault/vault.yaml
    - vars/netmaker.yaml
  tags:
    - netmaker.full_setup

  tasks:
    # This is required to explicitly get the ansible facts for the
    # play. This is needed for the import_role task below.
    - name: Do ansible setup
      ansible.builtin.setup:
      tags:
        - never
        - base
        - base.geerlingguy.security
        - netmaker

    - name: Import geerlingguy.security role
      ansible.builtin.import_role:
        name: geerlingguy.security
      become: true
      tags:
        - base
        - base.geerlingguy.security

    - name: Include main role from base
      ansible.builtin.include_role:
        name: base
      vars:
        base_additional_packages: "{{ netmaker_server_additional_packages }}"
        base_docker_install: "{{ netmaker_server_docker_install }}"
        base_dotfiles: "{{ netmaker_server_dotfiles }}"
      tags:
        - base
        - base.apt
        - base.docker
        - base.dotfiles
        - base.known_hosts
        - base.timezone

    - name: Include main role from netmaker
      ansible.builtin.include_role:
        name: netmaker
      tags:
        - netmaker
