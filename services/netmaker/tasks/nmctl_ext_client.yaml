---
# Use the NMCTL CLI tool to create or update external clients
# on the Netmaker server as required.
#
# input vars:
#  external_clients: a list of external client definitions

# Get the current list of external clients
- name: Get the current list of external clients
  ansible.builtin.command:
    cmd: "nmctl ext_client list -o json"
  register: nmctl_ext_client_list
  changed_when: false

# Get all the hosts from the server
- name: Get all the hosts from the server
  ansible.builtin.command:
    cmd: nmctl host list -o json
  register: nmctl_external_client_hosts_list
  changed_when: false

# Get all the nodes from the server
- name: Get all the nodes from the server
  ansible.builtin.command:
    cmd: nmctl node list -o json
  register: nmctl_external_client_nodes_list
  changed_when: false

# If nmctl_ext_client_list.stdout is null, set it to an empty list
#
# This is to handle the edge case where there are no external clients
# currently defined on the server.
- name: If nmctl_ext_client_list.stdout is null, set it to an empty list
  ansible.builtin.set_fact:
    nmctl_ext_client_list:
      stdout: "[]"
  when: nmctl_ext_client_list.stdout == "null"

# Build the list of external clients
- name: Build the list of current external clients
  ansible.builtin.set_fact:
    client_list: "{{ client_list | default([]) +
                    [{'clientid': item_ext.clientid,
                      'network': item_node.network,
                      'nodeid': item_node.id,
                      'hostid': item_node.hostid,
                      'hostname': item_host.name}] }}"
  loop: "{{ nmctl_ext_client_list.stdout }}"
  loop_control:
    loop_var: item_ext
    label: "{{ item_ext.clientid }} {{ item_ext.network }}"
  vars:
    item_node: "{{ nmctl_external_client_nodes_list.stdout | from_json
                    | json_query(query_node) | first }}"
    item_host: "{{ nmctl_external_client_hosts_list.stdout | from_json
                    | json_query(query_host) | first }}"
    query_node: "[?id == '{{ item_ext.ingressgatewayid }}']"
    query_host: "[?id == '{{ item_node.hostid }}']"

# Define client_list as a default list if it doesn't exist
- name: Define client_list as a default list if it doesn't exist
  ansible.builtin.set_fact:
    client_list: "[{'clientid': 'null',
                    'network': 'null',
                    'nodeid': 'null',
                    'hostid': 'null',
                    'hostname': 'null' }]"
  when: client_list is not defined

# Add the host id to the external_clients list
- name: Add host id to the external_clients list
  ansible.builtin.set_fact:
    ext_clients_new: "{{ ext_clients_new | default([]) +
                         [item_ext | combine({'hostid': item_host.id})] }}"
  loop: "{{ external_clients }}"
  loop_control:
    loop_var: item_ext
    label: "{{ item_ext.name }} with host ID {{ item_host.id }}"
  vars:
    item_host: "{{ nmctl_external_client_hosts_list.stdout | from_json
                  | json_query(query_host) | first }}"
    query_host: "[?name == '{{ item_ext.host }}']"

# Create the external client if it doesn't exist
- name: Create the external client if it doesn't exist
  ansible.builtin.include_tasks: nmctl_ext_client_create.yaml
  loop: "{{ ext_clients_new }}"
  loop_control:
    label: "{{ item.name }} andn network {{ item.network }}"
  when: >
    client_list
    | selectattr('clientid', 'equalto', item.name)
    | selectattr('network', 'equalto', item.network)
    | list
    | length == 0
  vars:
    node: "{{ nmctl_external_client_nodes_list.stdout | from_json
              | json_query(query_node) | first }}"
    query_node: "[?network == '{{ item.network }}' &&
                  hostid == '{{ item.hostid }}']"
